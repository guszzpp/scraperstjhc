name: Rodar scraper diariamente STJ (Origem TJGO)

on:
  schedule:
    # 14:00 UTC = 11:00 Bras√≠lia (UTC-3)
    - cron: '0 14 * * *'
  workflow_dispatch: # Permite rodar manualmente

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    # Outputs do job (opcional, mas pode ser √∫til)
    outputs:
      # json_output removido
      email_subject: ${{ steps.montar_corpo.outputs.email_subject || 'Relat√≥rio Scraper STJ' }}
      attachment_name: ${{ steps.montar_corpo.outputs.attachment_name || '' }}

    steps:
      - name: ‚¨áÔ∏è Clonar o reposit√≥rio
        uses: actions/checkout@v4

      - name: üêç Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Ou a vers√£o que voc√™ usa
          cache: 'pip'

      - name: üì¶ Instalar depend√™ncias Python
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "::error::Arquivo requirements.txt n√£o encontrado!"
            exit 1
          fi

      # REMOVIDO: Passo para instalar jq n√£o √© mais necess√°rio
      # - name: ‚öôÔ∏è Instalar jq (para processar JSON)
      #   run: sudo apt-get update && sudo apt-get install -y jq

      - name: üìÖ Definir data de ontem
        id: data
        run: |
          ONTE_DATA=$(date -d 'yesterday' +'%d/%m/%Y')
          echo "Data de ontem definida como: $ONTE_DATA"
          echo "ontem=$ONTE_DATA" >> $GITHUB_OUTPUT

      - name: üöÄ Rodar o scraper Python
        id: scraper
        run: |
          echo "Executando script para a data: ${{ steps.data.outputs.ontem }}"
          # Chama o script Python, que agora gera .txt em vez de .json
          python main.py "${{ steps.data.outputs.ontem }}"

      # PASSO DE FALHA: Permanece o mesmo, pois lida com a falha do script Python em si
      - name: ‚ö†Ô∏è Preparar e-mail de FALHA do Script
        if: failure() && steps.scraper.outcome == 'failure'
        id: falha_script
        run: |
          echo "::warning::O script Python falhou na execu√ß√£o!"
          SUBJECT="‚ùå FALHA no Scraper STJ - ${{ steps.data.outputs.ontem }}"
          BODY=$(cat <<EOF
          Prezado(a),

          Ocorreu uma FALHA durante a execu√ß√£o do script Python do scraper STJ (origem TJGO) para a data de ${{ steps.data.outputs.ontem }}.

          O script n√£o concluiu com sucesso (status de sa√≠da diferente de zero).

          Por favor, verifique os logs detalhados da execu√ß√£o no GitHub Actions para identificar a causa raiz do problema.

          Link para a execu√ß√£o: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          Atenciosamente,
          Sistema automatizado - GitHub Actions
          EOF
          )
          echo "email_subject=$SUBJECT" >> $GITHUB_OUTPUT
          echo "email_body<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "attachment_name=" >> $GITHUB_OUTPUT # Garante que n√£o tentar√° anexar nada

      # PASSO SUBSTITU√çDO: Agora apenas l√™ os arquivos de texto gerados pelo Python
      - name: üìÑ Preparar Dados do E-mail a Partir de Arquivos
        # Roda se o passo 'scraper' terminou com sucesso (status 0),
        # pois main.py deve ter criado os arquivos .txt mesmo que tenha reportado erro interno.
        if: success() || steps.scraper.outcome == 'success'
        id: montar_corpo # Mantendo ID para compatibilidade com outputs e passo de email
        run: |
          echo "Lendo arquivos de texto gerados pelo Python..."

          # L√™ o assunto, com um padr√£o caso o arquivo n√£o exista
          SUBJECT=$(cat email_subject.txt || echo "Relat√≥rio Scraper STJ - Arquivo de Assunto Ausente")

          # L√™ o corpo, com um padr√£o caso o arquivo n√£o exista
          # Importante: O corpo pode ser multi-linhas
          if [ -f email_body.txt ]; then
            # L√™ o corpo diretamente para a vari√°vel BODY
            mapfile -t body_lines < email_body.txt
            BODY=$(printf '%s\n' "${body_lines[@]}")
          else
            BODY="Erro cr√≠tico: Arquivo email_body.txt n√£o encontrado."
            echo "::error::$BODY"
          fi

          # L√™ o nome do anexo, padr√£o para string vazia se n√£o existir
          ATTACHMENT_NAME=$(cat attachment.txt || echo "")

          echo "Assunto lido: $SUBJECT"
          echo "Nome do anexo lido: $ATTACHMENT_NAME"
          # Evitar logar o corpo inteiro se for muito grande
          echo "Corpo do e-mail lido (primeira linha): $(echo "$BODY" | head -n 1)"

          # Exporta as vari√°veis
          echo "Exportando vari√°veis para o passo de e-mail..."
          echo "email_subject=$SUBJECT" >> $GITHUB_OUTPUT
          echo "attachment_name=$ATTACHMENT_NAME" >> $GITHUB_OUTPUT
          # Exporta o corpo multi-linhas para GITHUB_ENV
          echo "email_body<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # PASSO DE ENVIO DE E-MAIL: Ajustado para usar os outputs corretos
      - name: üì§ Enviar E-mail
        # Roda sempre que os passos anteriores n√£o falharam criticamente
        if: always() && (steps.falha_script.outcome == 'success' || steps.montar_corpo.outcome == 'success')
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USUARIO }}
          password: ${{ secrets.EMAIL_SENHA }}
          # Usa os outputs dos passos anteriores. Um deles ter√° rodado.
          subject: ${{ steps.falha_script.outputs.email_subject || steps.montar_corpo.outputs.email_subject }}
          # Corpo vem do GITHUB_ENV definido no passo anterior que rodou
          body: ${{ env.email_body }}
          to: ${{ secrets.EMAIL_DESTINATARIO }}
          from: Automa√ß√£o STJ <${{ secrets.EMAIL_USUARIO }}> # Nome amig√°vel
          # Anexa o arquivo baseado no output 'attachment_name'
          files: ./${{ steps.montar_corpo.outputs.attachment_name }}
          # Garante que s√≥ anexa se o arquivo realmente existir no runner
          attach_existing_only: true

      # NOVO PASSO OPCIONAL: Fazer upload dos arquivos gerados como artefatos para debug
      - name: üíæ Upload Arquivos Gerados (Debug)
        if: always() # Sempre tenta fazer upload
        uses: actions/upload-artifact@v4
        with:
          name: arquivos-gerados-pelo-script
          path: |
            email_subject.txt
            email_body.txt
            attachment.txt
            hc_tjgo_*.xlsx
          if-no-files-found: ignore # N√£o falha se algum arquivo n√£o existir
