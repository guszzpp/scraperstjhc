name: Rodar scraper diariamente STJ (Origem TJGO)

on:
  schedule:
    # Corre√ß√£o: '0 14 * * *' √© 14:00 UTC, que s√£o 11:00 Bras√≠lia (UTC-3)
    # Se quiser 08:00 Bras√≠lia (UTC-3), precisa ser 11:00 UTC.
    # Se quiser 11:00 Bras√≠lia (UTC-3), precisa ser 14:00 UTC.
    # Vamos manter 11:00 Bras√≠lia (14:00 UTC)
    - cron: '0 14 * * *'
  workflow_dispatch: # Permite rodar manualmente pela interface do GitHub Actions

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    # Define outputs para que outros jobs (se existirem) possam usar
    outputs:
      json_output: ${{ steps.montar_corpo.outputs.json_data || '{}' }}
      email_subject: ${{ steps.montar_corpo.outputs.email_subject || 'Relat√≥rio Scraper STJ' }}
      email_body: ${{ steps.montar_corpo.outputs.email_body || 'Corpo do e-mail n√£o gerado.' }}
      attachment_name: ${{ steps.montar_corpo.outputs.attachment_name || '' }}

    steps:
      - name: ‚¨áÔ∏è Clonar o reposit√≥rio
        uses: actions/checkout@v4 # Usar vers√£o mais recente

      - name: üêç Configurar Python
        uses: actions/setup-python@v5 # Usar vers√£o mais recente
        with:
          python-version: '3.10' # Ou a vers√£o que voc√™ usa
          cache: 'pip' # Habilita cache para acelerar instala√ß√µes futuras

      - name: üì¶ Instalar depend√™ncias Python
        run: |
          python -m pip install --upgrade pip
          # Assume que requirements.txt est√° na raiz do reposit√≥rio
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "::error::Arquivo requirements.txt n√£o encontrado!"
            exit 1
          fi

      - name: ‚öôÔ∏è Instalar jq (para processar JSON)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: üìÖ Definir data de ontem
        id: data
        run: |
          # Garante que est√° pegando a data correta relativa ao UTC do runner
          # Para ter certeza que √© o dia anterior em Bras√≠lia, precisar√≠amos de ajustes de timezone
          # Mas para um script di√°rio, `yesterday` geralmente funciona bem.
          ONTE_DATA=$(date -d 'yesterday' +'%d/%m/%Y')
          echo "Data de ontem definida como: $ONTE_DATA"
          echo "ontem=$ONTE_DATA" >> $GITHUB_OUTPUT

      - name: üöÄ Rodar o scraper Python
        id: scraper
        run: |
          echo "Executando script para a data: ${{ steps.data.outputs.ontem }}"
          # Chama o script Python passando a data como argumento
          python main.py "${{ steps.data.outputs.ontem }}"
        # Importante: n√£o usar continue-on-error aqui, a menos que voc√™ queira
        # explicitamente tratar a falha do script nos passos seguintes.
        # Se o script Python sair com erro (sys.exit(1)), este passo falhar√°.

      # Este passo S√ì RODA SE O PASSO ANTERIOR (scraper) FALHOU
      - name: ‚ö†Ô∏è Preparar e-mail de FALHA do Script
        if: failure() && steps.scraper.outcome == 'failure'
        id: falha_script
        run: |
          echo "::warning::O script Python falhou na execu√ß√£o!"
          SUBJECT="‚ùå FALHA no Scraper STJ - ${{ steps.data.outputs.ontem }}"
          BODY=$(cat <<EOF
          Prezado(a),

          Ocorreu uma FALHA durante a execu√ß√£o do script Python do scraper STJ (origem TJGO) para a data de ${{ steps.data.outputs.ontem }}.

          O script n√£o concluiu com sucesso (status de sa√≠da diferente de zero).

          Por favor, verifique os logs detalhados da execu√ß√£o no GitHub Actions para identificar a causa raiz do problema.

          Link para a execu√ß√£o: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          Atenciosamente,
          Sistema automatizado - GitHub Actions
          EOF
          )
          # Exporta para uso no passo de envio de e-mail
          echo "email_subject=$SUBJECT" >> $GITHUB_OUTPUT
          # Usar GITHUB_ENV para corpo multilinha √© mais robusto
          echo "email_body<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "attachment_name=" >> $GITHUB_OUTPUT # Garante que n√£o tentar√° anexar nada

      # Este passo RODA SE O PASSO 'scraper' FOI BEM SUCEDIDO (mesmo que o script tenha encontrado erros internos e gerado JSON de erro)
      - name: üìÑ Extrair informa√ß√µes do JSON e Montar Corpo do E-mail (Sucesso/Erro Interno)
        if: success() || steps.scraper.outcome == 'success' # Roda se o script terminou (status 0)
        id: montar_corpo
        run: |
          echo "Verificando resultado da execu√ß√£o..."
          JSON_FILE="info_execucao.json"

          if [ ! -f "$JSON_FILE" ]; then
            echo "::error::Arquivo $JSON_FILE n√£o foi encontrado! O script Python pode n√£o ter gerado."
            # Define um corpo de e-mail de erro espec√≠fico para este caso
            SUBJECT="‚ö†Ô∏è Problema no Scraper STJ - ${{ steps.data.outputs.ontem }} - JSON Ausente"
            BODY=$(cat <<EOF
            Prezado(a),

            Ocorreu um problema inesperado durante a execu√ß√£o do scraper STJ (origem TJGO) para a data de ${{ steps.data.outputs.ontem }}.

            O script Python concluiu a execu√ß√£o, mas o arquivo de resultados '$JSON_FILE' n√£o foi encontrado.

            Isso pode indicar um erro interno grave no script que impediu a cria√ß√£o do arquivo de status.

            Verifique os logs da execu√ß√£o no GitHub Actions:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Atenciosamente,
            Sistema automatizado - GitHub Actions
            EOF
            )
            ATTACHMENT_NAME=""
          else
            echo "Arquivo $JSON_FILE encontrado. Lendo dados..."
            # Valida se o JSON √© v√°lido antes de usar jq
            if ! jq empty "$JSON_FILE" > /dev/null 2>&1; then
              echo "::error::Arquivo $JSON_FILE est√° corrompido ou n√£o √© um JSON v√°lido!"
              SUBJECT="‚ùå ERRO no Scraper STJ - ${{ steps.data.outputs.ontem }} - JSON Inv√°lido"
              BODY=$(cat <<EOF
              Prezado(a),

              Ocorreu um erro cr√≠tico durante a execu√ß√£o do scraper STJ (origem TJGO) para a data de ${{ steps.data.outputs.ontem }}.

              O arquivo de status '$JSON_FILE' foi encontrado, mas est√° corrompido ou n√£o √© um JSON v√°lido.

              Verifique os logs da execu√ß√£o e o conte√∫do do arquivo no artefato (se dispon√≠vel) no GitHub Actions:
              ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              Atenciosamente,
              Sistema automatizado - GitHub Actions
              EOF
              )
              ATTACHMENT_NAME=""
            else
              # Extrai dados do JSON v√°lido
              json_data=$(cat "$JSON_FILE")
              echo "$json_data" | jq . # Printa o JSON no log para debug

              erro=$(echo "$json_data" | jq -r '.erro_critico // ""')
              data_ini=$(echo "$json_data" | jq -r '.data_inicial // "N/A"')
              data_fim=$(echo "$json_data" | jq -r '.data_final // "N/A"')
              orgao=$(echo "$json_data" | jq -r '.orgao_origem // "N/A"')
              qtd_site=$(echo "$json_data" | jq -r '.qtd_resultados_site // "?"')
              qtd_hcs=$(echo "$json_data" | jq -r '.qtd_hcs // 0')
              pags_total=$(echo "$json_data" | jq -r '.paginas_total // 0')
              pags_ok=$(echo "$json_data" | jq -r '.paginas_processadas // 0')
              horario=$(echo "$json_data" | jq -r '.horario_finalizacao // "N/A"')
              duracao=$(echo "$json_data" | jq -r '.duracao_segundos // "?"')
              arquivo_gerado=$(echo "$json_data" | jq -r '.arquivo_gerado // ""') # Nome do arquivo .xlsx

              # Define o corpo do e-mail com base nos dados
              if [ -n "$erro" ] && [ "$erro" != "null" ]; then
                # CEN√ÅRIO 1: Erro cr√≠tico reportado no JSON
                echo "Montando e-mail de ERRO CR√çTICO reportado pelo script..."
                SUBJECT="‚ùå ERRO no Scraper STJ - ${data_ini}"
                BODY=$(cat <<EOF
                Prezado(a),

                Ocorreu um erro cr√≠tico durante a execu√ß√£o do scraper de HCs no STJ (origem $orgao) para o per√≠odo de ${data_ini} a ${data_fim}.

                O erro reportado pelo script foi:
                ${erro}

                Detalhes da execu√ß√£o:
                - Resultados encontrados pelo site: ${qtd_site}
                - HCs efetivamente extra√≠dos: ${qtd_hcs}
                - P√°ginas processadas: ${pags_ok} de ${pags_total} (estimado)
                - Script finalizado em: ${horario} (Dura√ß√£o: ${duracao}s)

                Nenhum relat√≥rio em anexo devido ao erro.

                Recomenda-se verificar manualmente no site do STJ:
                https://processo.stj.jus.br/processo/pesquisa/?aplicacao=processos.ea

                Link para a execu√ß√£o no GHA: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                Atenciosamente,
                Sistema automatizado - GitHub Actions
                EOF
                )
                ATTACHMENT_NAME="" # Garante que n√£o anexa nada

              elif [ "$qtd_hcs" -gt 0 ] && [ -n "$arquivo_gerado" ] && [ -f "$arquivo_gerado" ]; then
                # CEN√ÅRIO 2: Sucesso com HCs encontrados e arquivo gerado
                echo "Montando e-mail de SUCESSO com HCs e anexo..."
                SUBJECT="‚úÖ Relat√≥rio HCs STJ (Origem ${orgao}) - ${data_ini}"
                BODY=$(cat <<EOF
                Prezado(a),

                Segue em anexo o relat√≥rio de Habeas Corpus (HCs) autuados no STJ, com origem no ${orgao}, referente ao per√≠odo de ${data_ini} a ${data_fim}.

                Resumo da execu√ß√£o:
                - Resultados encontrados pelo site: ${qtd_site}
                - HCs efetivamente extra√≠dos: ${qtd_hcs} (detalhes no anexo)
                - P√°ginas processadas: ${pags_ok} de ${pags_total} (estimado)
                - Script finalizado em: ${horario} (Dura√ß√£o: ${duracao}s)

                O arquivo '${arquivo_gerado}' est√° anexado a este e-mail.

                Esta automa√ß√£o tem como objetivo auxiliar no acompanhamento processual, mas **n√£o substitui a confer√™ncia manual nos canais oficiais do STJ**.

                Link para a execu√ß√£o no GHA: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                Atenciosamente,
                Sistema automatizado - GitHub Actions
                EOF
                )
                ATTACHMENT_NAME="$arquivo_gerado" # Define o nome do anexo

              else
                # CEN√ÅRIO 3: Sucesso, mas nenhum HC encontrado (ou arquivo n√£o gerado por algum motivo)
                echo "Montando e-mail de SUCESSO sem HCs encontrados..."
                SUBJECT="‚ÑπÔ∏è Nenhum HC encontrado STJ (Origem ${orgao}) - ${data_ini}"
                BODY=$(cat <<EOF
                Prezado(a),

                Nenhum Habeas Corpus (HC) com origem no ${orgao} foi localizado ou extra√≠do com sucesso no STJ para o per√≠odo de ${data_ini} a ${data_fim}.

                Resumo da execu√ß√£o:
                - Resultados encontrados pelo site: ${qtd_site}
                - HCs efetivamente extra√≠dos: ${qtd_hcs}
                - P√°ginas processadas: ${pags_ok} de ${pags_total} (estimado)
                - Script finalizado em: ${horario} (Dura√ß√£o: ${duracao}s)

                Nenhum arquivo foi gerado ou anexado.

                Esta automa√ß√£o tem como objetivo auxiliar no acompanhamento processual, mas **n√£o substitui a confer√™ncia manual nos canais oficiais do STJ**.

                Link para a execu√ß√£o no GHA: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                Atenciosamente,
                Sistema automatizado - GitHub Actions
                EOF
                )
                ATTACHMENT_NAME="" # Garante que n√£o anexa nada
              fi
            fi
          fi
          # Exporta as vari√°veis para o pr√≥ximo passo
          echo "Exportando vari√°veis para o passo de e-mail..."
          echo "email_subject=$SUBJECT" >> $GITHUB_OUTPUT
          echo "attachment_name=$ATTACHMENT_NAME" >> $GITHUB_OUTPUT
          # Exporta o corpo multilinha para GITHUB_ENV
          echo "email_body<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          # Exporta o JSON original como output para outros jobs, se necess√°rio
          echo "json_data=$(jq -c . "$JSON_FILE" || echo '{}')" >> $GITHUB_OUTPUT


      - name: üì§ Enviar E-mail
        # Roda sempre (se os passos anteriores n√£o falharam criticamente),
        # pois os passos anteriores (falha_script ou montar_corpo) SEMPRE definem um corpo/assunto.
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USUARIO }}
          password: ${{ secrets.EMAIL_SENHA }}
          # Usa os outputs dos passos anteriores para definir assunto e corpo
          # Se o script falhou, usa outputs de 'falha_script', sen√£o usa de 'montar_corpo'
          subject: ${{ steps.falha_script.outputs.email_subject || steps.montar_corpo.outputs.email_subject }}
          body: ${{ env.email_body }} # Corpo vem do GITHUB_ENV definido no passo anterior
          to: ${{ secrets.EMAIL_DESTINATARIO }}
          from: Automa√ß√£o STJ <${{ secrets.EMAIL_USUARIO }}> # Nome amig√°vel
          # Anexa o arquivo SOMENTE se o nome foi definido E o arquivo existe
          files: ${{ steps.montar_corpo.outputs.attachment_name }}
          # Garante que s√≥ anexa se o arquivo realmente existir no runner
          attach_existing_only: true
