#!/usr/bin/env python3
"""
Script de teste simples para verificar se a p√°gina do STJ carrega corretamente
"""

import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_stj_page():
    """
    Testa se a p√°gina do STJ carrega e se os elementos do formul√°rio est√£o presentes
    """
    logging.info("üöÄ Iniciando teste da p√°gina do STJ")
    
    # Configurar Chrome
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36")
    
    # Op√ß√µes para evitar detec√ß√£o de bot
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    try:
        # Iniciar navegador
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        wait = WebDriverWait(driver, 30)
        
        logging.info("‚úÖ Navegador iniciado com sucesso")
        
        # Acessar p√°gina
        url = "https://processo.stj.jus.br/processo/pesquisa/?aplicacao=processos.ea"
        logging.info(f"üåê Acessando: {url}")
        driver.get(url)
        
        # Aguardar carregamento
        logging.info("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(5)
        
        # Verificar informa√ß√µes b√°sicas
        logging.info(f"üìÑ T√≠tulo da p√°gina: {driver.title}")
        logging.info(f"üåê URL atual: {driver.current_url}")
        logging.info(f"üìä ReadyState: {driver.execute_script('return document.readyState')}")
        
        # Verificar se h√° iframes
        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        logging.info(f"üñºÔ∏è Iframes encontrados: {len(iframes)}")
        
        # Tentar encontrar elementos do formul√°rio
        elementos_teste = [
            "idDataAutuacaoInicial",
            "idDataAutuacaoFinal",
            "idBotaoPesquisarFormularioExtendido",
            "idOrgaosOrigemCampoParaPesquisar"
        ]
        
        logging.info("üîç Verificando elementos do formul√°rio...")
        for elemento_id in elementos_teste:
            try:
                elemento = driver.find_element(By.ID, elemento_id)
                logging.info(f"‚úÖ {elemento_id}: ENCONTRADO")
                logging.info(f"   - Vis√≠vel: {elemento.is_displayed()}")
                logging.info(f"   - Habilitado: {elemento.is_enabled()}")
                logging.info(f"   - Tag: {elemento.tag_name}")
                logging.info(f"   - Type: {elemento.get_attribute('type')}")
                logging.info(f"   - Name: {elemento.get_attribute('name')}")
            except NoSuchElementException:
                logging.error(f"‚ùå {elemento_id}: N√ÉO ENCONTRADO")
        
        # Tentar encontrar por name
        logging.info("üîç Verificando elementos por name...")
        names_teste = ["dataAutuacaoInicial", "dataAutuacaoFinal"]
        for name in names_teste:
            try:
                elemento = driver.find_element(By.NAME, name)
                logging.info(f"‚úÖ {name}: ENCONTRADO por name")
            except NoSuchElementException:
                logging.error(f"‚ùå {name}: N√ÉO ENCONTRADO por name")
        
        # Verificar se h√° formul√°rios
        forms = driver.find_elements(By.TAG_NAME, "form")
        logging.info(f"üìù Formul√°rios encontrados: {len(forms)}")
        
        # Verificar inputs
        inputs = driver.find_elements(By.TAG_NAME, "input")
        logging.info(f"‚å®Ô∏è Inputs encontrados: {len(inputs)}")
        
        # Listar alguns inputs para debug
        for i, input_elem in enumerate(inputs[:10]):  # Primeiros 10 inputs
            try:
                input_id = input_elem.get_attribute('id')
                input_name = input_elem.get_attribute('name')
                input_type = input_elem.get_attribute('type')
                logging.info(f"   Input {i+1}: id='{input_id}', name='{input_name}', type='{input_type}'")
            except Exception as e:
                logging.error(f"   Erro ao verificar input {i+1}: {e}")
        
        # Capturar screenshot
        screenshot_path = f"teste_stj_{int(time.time())}.png"
        driver.save_screenshot(screenshot_path)
        logging.info(f"üì∏ Screenshot salvo: {screenshot_path}")
        
        # Tentar aguardar elemento espec√≠fico
        logging.info("‚è≥ Tentando aguardar elemento idDataAutuacaoInicial...")
        try:
            elemento = wait.until(EC.visibility_of_element_located((By.ID, "idDataAutuacaoInicial")))
            logging.info("‚úÖ Elemento idDataAutuacaoInicial encontrado e vis√≠vel!")
        except TimeoutException:
            logging.error("‚ùå Timeout ao aguardar elemento idDataAutuacaoInicial")
        
        logging.info("‚úÖ Teste conclu√≠do")
        
    except Exception as e:
        logging.error(f"‚ùå Erro durante o teste: {e}")
        raise
    finally:
        try:
            driver.quit()
            logging.info("üîí Navegador fechado")
        except:
            pass

if __name__ == "__main__":
    test_stj_page()
