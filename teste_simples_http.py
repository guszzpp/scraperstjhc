#!/usr/bin/env python3
"""
Teste simples para verificar se a p√°gina do STJ est√° acess√≠vel
Usa apenas requisi√ß√µes HTTP, sem necessidade de navegador
"""

import requests
import time
import logging
from urllib.parse import urlparse
import re

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('teste_http.log', encoding='utf-8')
    ]
)

def test_stj_page_http():
    """
    Testa se a p√°gina do STJ est√° acess√≠vel via HTTP
    """
    logging.info("üöÄ Iniciando teste HTTP da p√°gina do STJ")
    
    url = "https://processo.stj.jus.br/processo/pesquisa/?aplicacao=processos.ea"
    
    # Headers para simular um navegador real
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }
    
    try:
        logging.info(f"üåê Testando acesso √† URL: {url}")
        
        # Fazer a requisi√ß√£o
        start_time = time.time()
        response = requests.get(url, headers=headers, timeout=30)
        end_time = time.time()
        
        # Verificar status da resposta
        logging.info(f"üìä Status da resposta: {response.status_code}")
        logging.info(f"‚è±Ô∏è Tempo de resposta: {end_time - start_time:.2f} segundos")
        
        if response.status_code == 200:
            logging.info("‚úÖ P√°gina acess√≠vel (status 200)")
        else:
            logging.error(f"‚ùå P√°gina retornou status {response.status_code}")
            return False
        
        # Verificar headers da resposta
        logging.info("üìã Headers da resposta:")
        for key, value in response.headers.items():
            logging.info(f"   {key}: {value}")
        
        # Verificar conte√∫do da p√°gina
        content = response.text
        content_length = len(content)
        logging.info(f"üìÑ Tamanho do conte√∫do: {content_length} caracteres")
        
        # Verificar se a p√°gina cont√©m elementos importantes
        logging.info("üîç Verificando elementos na p√°gina:")
        
        # Verificar t√≠tulo
        title_match = re.search(r'<title[^>]*>(.*?)</title>', content, re.IGNORECASE | re.DOTALL)
        if title_match:
            title = title_match.group(1).strip()
            logging.info(f"‚úÖ T√≠tulo encontrado: {title}")
        else:
            logging.warning("‚ö†Ô∏è T√≠tulo n√£o encontrado")
        
        # Verificar se cont√©m elementos do formul√°rio
        elementos_procurados = [
            'idDataAutuacaoInicial',
            'idDataAutuacaoFinal',
            'dataAutuacaoInicial',
            'dataAutuacaoFinal',
            'idBotaoPesquisarFormularioExtendido',
            'idOrgaosOrigemCampoParaPesquisar'
        ]
        
        elementos_encontrados = 0
        for elemento in elementos_procurados:
            if elemento in content:
                logging.info(f"‚úÖ Elemento '{elemento}' encontrado no HTML")
                elementos_encontrados += 1
            else:
                logging.warning(f"‚ö†Ô∏è Elemento '{elemento}' n√£o encontrado")
        
        # Verificar se cont√©m palavras-chave do STJ
        palavras_chave = ['STJ', 'Superior Tribunal de Justi√ßa', 'processo', 'pesquisa']
        for palavra in palavras_chave:
            if palavra.lower() in content.lower():
                logging.info(f"‚úÖ Palavra-chave '{palavra}' encontrada")
            else:
                logging.warning(f"‚ö†Ô∏è Palavra-chave '{palavra}' n√£o encontrada")
        
        # Verificar se √© uma p√°gina de formul√°rio
        if '<form' in content.lower():
            logging.info("‚úÖ P√°gina cont√©m formul√°rio")
        else:
            logging.warning("‚ö†Ô∏è P√°gina n√£o cont√©m formul√°rio")
        
        # Verificar se h√° inputs
        inputs_count = len(re.findall(r'<input[^>]*>', content, re.IGNORECASE))
        logging.info(f"‚úÖ Encontrados {inputs_count} elementos input")
        
        # Verificar se h√° JavaScript
        if '<script' in content.lower():
            logging.info("‚úÖ P√°gina cont√©m JavaScript")
        else:
            logging.warning("‚ö†Ô∏è P√°gina n√£o cont√©m JavaScript")
        
        # Salvar conte√∫do para an√°lise
        with open('pagina_stj.html', 'w', encoding='utf-8') as f:
            f.write(content)
        logging.info("üíæ Conte√∫do da p√°gina salvo em 'pagina_stj.html'")
        
        # Resumo do teste
        logging.info("üìã RESUMO DO TESTE HTTP:")
        logging.info(f"   - Status: {response.status_code}")
        logging.info(f"   - Tempo de resposta: {end_time - start_time:.2f}s")
        logging.info(f"   - Tamanho do conte√∫do: {content_length} chars")
        logging.info(f"   - Elementos espec√≠ficos encontrados: {elementos_encontrados}/{len(elementos_procurados)}")
        logging.info(f"   - Inputs encontrados: {inputs_count}")
        
        # Crit√©rios de sucesso
        sucesso = (
            response.status_code == 200 and
            elementos_encontrados >= 2 and  # Pelo menos 2 elementos espec√≠ficos
            inputs_count > 0 and
            content_length > 1000  # P√°gina tem conte√∫do significativo
        )
        
        if sucesso:
            logging.info("‚úÖ TESTE HTTP PASSOU - P√°gina est√° acess√≠vel e cont√©m elementos esperados")
            return True
        else:
            logging.error("‚ùå TESTE HTTP FALHOU - P√°gina n√£o atende aos crit√©rios m√≠nimos")
            return False
            
    except requests.exceptions.Timeout:
        logging.error("‚ùå Timeout na requisi√ß√£o - p√°gina demorou muito para responder")
        return False
    except requests.exceptions.ConnectionError:
        logging.error("‚ùå Erro de conex√£o - n√£o foi poss√≠vel conectar ao servidor")
        return False
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False
    except Exception as e:
        logging.error(f"‚ùå Erro inesperado: {e}")
        return False

def test_url_redirects():
    """
    Testa se h√° redirecionamentos na URL
    """
    logging.info("üîÑ Testando redirecionamentos...")
    
    url = "https://processo.stj.jus.br/processo/pesquisa/?aplicacao=processos.ea"
    
    try:
        # Fazer requisi√ß√£o sem seguir redirecionamentos
        response = requests.get(url, allow_redirects=False, timeout=10)
        
        if response.status_code in [301, 302, 303, 307, 308]:
            logging.warning(f"‚ö†Ô∏è URL redireciona para: {response.headers.get('Location', 'N/A')}")
            return False
        else:
            logging.info("‚úÖ URL n√£o redireciona")
            return True
            
    except Exception as e:
        logging.error(f"‚ùå Erro ao testar redirecionamentos: {e}")
        return False

if __name__ == "__main__":
    print("üîç Teste HTTP da p√°gina do STJ")
    print("=" * 50)
    
    # Testar redirecionamentos
    redirect_ok = test_url_redirects()
    
    # Testar acesso √† p√°gina
    sucesso = test_stj_page_http()
    
    print("\n" + "=" * 50)
    if sucesso and redirect_ok:
        print("üéâ Teste HTTP conclu√≠do com SUCESSO!")
        print("‚úÖ A p√°gina do STJ est√° acess√≠vel e cont√©m os elementos esperados")
    else:
        print("üí• Teste HTTP conclu√≠do com FALHA!")
        print("‚ùå H√° problemas com o acesso √† p√°gina do STJ")
    
    print("\nüìÑ Log detalhado salvo em: teste_http.log")
    print("üíæ Conte√∫do da p√°gina salvo em: pagina_stj.html")
