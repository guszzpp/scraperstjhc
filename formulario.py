# formulario.py

import time
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
from config import URL_PESQUISA, ORGAO_ORIGEM

# Defini√ß√£o da fun√ß√£o click_and_wait
def click_and_wait(driver, wait, button_locator, result_locator, retries=3, delay=5):
    """
    Tenta clicar em um bot√£o e esperar por um resultado, com N tentativas.
    Args:
        driver: Inst√¢ncia do WebDriver.
        wait: Inst√¢ncia do WebDriverWait J√Å CONFIGURADA com o timeout desejado.
        button_locator: Tupla (By, "valor") para localizar o bot√£o.
        result_locator: Tupla (By, "valor") para localizar o elemento de resultado.
        retries: N√∫mero m√°ximo de tentativas.
        delay: Tempo de espera entre tentativas (segundos).
    Returns:
        True se sucesso, False se falhar ap√≥s todas as tentativas.
    """
    last_exception = None # Guarda a √∫ltima exce√ß√£o para log
    for i in range(retries):
        try:
            logging.info(f"click_and_wait: Tentativa {i+1}/{retries} de encontrar e clicar no bot√£o ({button_locator})...")
            # Espera o bot√£o ser clic√°vel antes de tentar (wait curto aqui)
            button_element = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable(button_locator)
            )
            # Scroll pode ser √∫til aqui tamb√©m
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button_element)
            time.sleep(0.5) # Pequena pausa antes do clique

            button_element.click()
            logging.info("click_and_wait: Bot√£o clicado. Aguardando carregamento dos resultados...")

            # Usa o objeto 'wait' passado como argumento diretamente.
            wait.until(
                 EC.presence_of_element_located(result_locator)
            )

            logging.info(f"click_and_wait: Elemento de resultado ({result_locator}) encontrado com sucesso.")
            return True # Sucesso!

        except (WebDriverException, TimeoutException) as e: # Captura erros comuns do Selenium
            logging.warning(f"click_and_wait: Erro Selenium/Timeout na tentativa {i+1}: {type(e).__name__} - {e}")
            last_exception = e # Guarda a exce√ß√£o
            if i < retries - 1:
                 logging.info(f"Aguardando {delay}s antes da pr√≥xima tentativa...")
                 time.sleep(delay)
            else:
                 logging.error(f"click_and_wait: Falha ap√≥s {retries} tentativas devido a {type(e).__name__}.")
        except Exception as e: # Captura outros erros inesperados
            logging.warning(f"click_and_wait: Erro inesperado na tentativa {i+1}: {type(e).__name__} - {e}")
            last_exception = e # Guarda a exce√ß√£o
            if i < retries - 1:
                logging.info(f"Aguardando {delay}s antes da pr√≥xima tentativa...")
                time.sleep(delay)
            else:
                logging.error(f"click_and_wait: Falha ap√≥s {retries} tentativas devido a erro inesperado.")

    logging.error(f"click_and_wait: Todas as tentativas falharam. √öltimo erro: {last_exception}")
    return False # Falhou ap√≥s todas as tentativas


def preencher_formulario(driver, wait, data_inicial, data_final):
    """
    Acessa a p√°gina de pesquisa do STJ e preenche os campos do formul√°rio.
    """
    logging.info("Acessando URL de pesquisa...")
    driver.get(URL_PESQUISA)
    
    # Aguardar p√°gina carregar completamente
    logging.info("Aguardando carregamento da p√°gina...")
    time.sleep(3)  # Pausa inicial para carregamento
    
    # Tentar m√∫ltiplas estrat√©gias para detectar se a p√°gina carregou
    try:
        # Estrat√©gia 1: Elemento principal do formul√°rio
        WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.ID, "idDataAutuacaoInicial")))
        logging.info("‚úÖ P√°gina carregada (estrat√©gia 1).")
    except TimeoutException:
        try:
            # Estrat√©gia 2: Verificar se a p√°gina tem conte√∫do
            WebDriverWait(driver, 15).until(lambda d: d.execute_script("return document.readyState") == "complete")
            logging.info("‚úÖ P√°gina carregada (estrat√©gia 2 - readyState).")
        except TimeoutException:
            try:
                # Estrat√©gia 3: Verificar t√≠tulo da p√°gina
                WebDriverWait(driver, 10).until(lambda d: "STJ" in d.title)
                logging.info("‚úÖ P√°gina carregada (estrat√©gia 3 - t√≠tulo).")
            except TimeoutException:
                logging.error("‚ùå Falha ao carregar p√°gina ap√≥s m√∫ltiplas tentativas.")
                # Capturar screenshot para debug
                try:
                    screenshot_path = f"error_screenshot_{int(time.time())}.png"
                    driver.save_screenshot(screenshot_path)
                    logging.info(f"üì∏ Screenshot salvo: {screenshot_path}")
                    logging.info(f"üìÑ T√≠tulo da p√°gina: {driver.title}")
                    logging.info(f"üåê URL atual: {driver.current_url}")
                except Exception as e:
                    logging.error(f"‚ùå Erro ao capturar screenshot: {e}")
                raise TimeoutException("P√°gina n√£o carregou no tempo esperado")
    
    logging.info("P√°gina carregada. Preenchendo datas...")

    # Datas
    campo_data_inicial = wait.until(EC.visibility_of_element_located((By.ID, "idDataAutuacaoInicial")))
    campo_data_inicial.clear()
    campo_data_inicial.send_keys(data_inicial)

    campo_data_final = wait.until(EC.visibility_of_element_located((By.ID, "idDataAutuacaoFinal")))
    campo_data_final.clear()
    campo_data_final.send_keys(data_final)
    logging.info("Datas preenchidas.")

    # Expandir se√ß√£o do √≥rg√£o julgador
    logging.info("Expandindo se√ß√£o do √≥rg√£o de origem...")
    try:
        secao_julgador = wait.until(EC.element_to_be_clickable((By.ID, "idJulgadorOrigemTipoBlocoLabel")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", secao_julgador)
        time.sleep(0.5)
        secao_julgador.click()
        time.sleep(0.5)
    except Exception as e:
         logging.error(f"Erro ao expandir se√ß√£o √≥rg√£o julgador: {e}")
         raise

    # Campo de √≥rg√£o de origem
    logging.info("Preenchendo √≥rg√£o de origem...")
    try:
        campo_origem = wait.until(EC.visibility_of_element_located((By.ID, "idOrgaosOrigemCampoParaPesquisar")))
        campo_origem.clear()
        campo_origem.send_keys(ORGAO_ORIGEM)
        time.sleep(1)
    except Exception as e:
         logging.error(f"Erro ao preencher campo √≥rg√£o de origem: {e}")
         raise

    # Defini√ß√£o dos localizadores para bot√£o e resultados esperados
    botao_pesquisar_locator = (By.ID, "idBotaoPesquisarFormularioExtendido")
    # Espera por MENSAGEM, LISTA ou DETALHES (pelo ID do span da classe)
    resultado_locator = (By.CSS_SELECTOR, ".clsMensagemLinha, .clsListaProcessoFormatoVerticalLinha, #idSpanClasseDescricao")

    logging.info("Tentando clicar em 'Pesquisar' e aguardar resultados com retentativas...")
    # Chama a fun√ß√£o de clique com retentativas
    if not click_and_wait(driver, wait, botao_pesquisar_locator, resultado_locator, retries=3, delay=5):
        # Se a fun√ß√£o retornar False (falhou ap√≥s retentativas), levanta uma exce√ß√£o
        logging.error("Falha cr√≠tica ao clicar em pesquisar e aguardar resultados ap√≥s m√∫ltiplas tentativas.")
        raise TimeoutException("Falha ao clicar em Pesquisar e obter resultados ap√≥s m√∫ltiplas tentativas.")

    logging.info("Preenchimento do formul√°rio e espera p√≥s-pesquisa conclu√≠dos.")
